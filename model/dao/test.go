package dao

// study_test表 相关dao
// Code generated by dev-tools-cli.

import (
	"context"
)

// StudyTestDao 表结构体
type StudyTestDao struct {
	DBDaoBase
}

// TableStudyTest 表名称
const TableStudyTest = "study_test"

const (
	// studyTestDefaultPn 分页查询使用的默认页码
	studyTestDefaultPn = 1

	// studyTestDefaultRn 分页查询使用的默认数据量
	studyTestDefaultRn = 20
)

// studyTestSelectFields 表中字段
var studyTestSelectFields = []string{
	"id", "name",
}

// NewStudyTestDao 初始化
func NewStudyTestDao() *StudyTestDao {
	return &StudyTestDao{
		DBDaoBase: NewDBDao(TableStudyTest),
	}
}

// StudyTestItem is a mapping object for basic_study.study_test table
type StudyTestItem struct {
	ID   *uint64 `ddb:"id" json:"id"`     // id
	Name *string `ddb:"name" json:"name"` // username
}

// Add 新增信息
func (dao *StudyTestDao) Add(ctx context.Context, data StudyTestItem) (int64, error) {
	// tm := uint32(time.Now().Unix())
	// data.CreateTime = proto.Uint32(tm)
	// data.UpdateTime = proto.Uint32(tm)

	lastInsertID, err := dao.BaseInsert(ctx, data)
	if err == nil && lastInsertID != 0 {
		return lastInsertID, nil
	}
	return 0, err
}

// Update 修改信息
func (dao *StudyTestDao) Update(ctx context.Context, data StudyTestItem, id uint64) (int64, error) {
	where := map[string]any{
		"id": id,
	}

	return dao.BaseUpdate(ctx, where, data)
}

// MgetByIDs 按照ID批量查询信息
func (dao *StudyTestDao) MgetByIDs(ctx context.Context, ids []uint64) ([]StudyTestItem, error) {
	var res []StudyTestItem
	where := map[string]any{
		"id in": ids,
	}

	// selectFields := []string{}
	selectFields := studyTestSelectFields

	err := dao.BaseSelectConvert(ctx, where, selectFields, &res)
	if err != nil {
		return nil, err
	}
	return res, nil
}

// MgetByPage 按照指定条件查询信息
func (dao *StudyTestDao) MgetByPage(ctx context.Context, data StudyTestItem, pn, rn uint32) ([]StudyTestItem, int64, error) {
	where := map[string]any{}

	totalNum, err := dao.Count(ctx, where)
	if err != nil {
		return nil, 0, err
	}

	var res []StudyTestItem
	queryPn := uint(studyTestDefaultPn)
	if pn > 0 {
		queryPn = uint(pn)
	}
	queryRn := uint(studyTestDefaultRn)
	if rn > 0 {
		queryRn = uint(rn)
	}
	where["_limit"] = []uint{(queryPn - 1) * queryRn, queryRn}
	err = dao.BaseSelectConvert(ctx, where, studyTestSelectFields, &res)
	if err != nil {
		return nil, 0, err
	}
	return res, totalNum, nil
}
