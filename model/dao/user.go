package dao

// study_user表 相关dao
// Code generated by dev-tools-cli.

import (
	"context"
	"google.golang.org/protobuf/proto"
	"time"
)

// StudyUserDao 表结构体
type StudyUserDao struct {
	DBDaoBase
}

// TableStudyUser 表名称
const TableStudyUser = "study_user"

const (
	// studyUserDefaultPn 分页查询使用的默认页码
	studyUserDefaultPn = 1

	// studyUserDefaultRn 分页查询使用的默认数据量
	studyUserDefaultRn = 20
)

// studyUserSelectFields 表中字段
var studyUserSelectFields = []string{
	"id", "create_time", "username", "password", "status",
}

// NewStudyUserDao 初始化
func NewStudyUserDao() *StudyUserDao {
	return &StudyUserDao{
		DBDaoBase: NewDBDao(TableStudyUser),
	}
}

// StudyUserItem is a mapping object for basic_study.study_user table
type StudyUserItem struct {
	Id         *uint64 `ddb:"id" json:"id"`                   // id
	CreateTime *uint64 `ddb:"create_time" json:"create_time"` // create time
	Username   *string `ddb:"username" json:"username"`       // username
	Password   *string `ddb:"password" json:"password"`       // password
	Status     *uint8  `ddb:"status" json:"status"`           // 1-normal 2-deleted
}

// Add 新增信息
func (dao *StudyUserDao) Add(ctx context.Context, data StudyUserItem) (int64, error) {
	tm := time.Now().Unix()
	data.CreateTime = proto.Uint64(uint64(tm))

	lastInsertID, err := dao.BaseInsert(ctx, data)
	if err == nil && lastInsertID != 0 {
		return lastInsertID, nil
	}
	return 0, err
}

// Update 修改信息
func (dao *StudyUserDao) Update(ctx context.Context, data StudyUserItem, id uint64) (int64, error) {
	where := map[string]any{
		"id": id,
	}

	return dao.BaseUpdate(ctx, where, data)
}

// MgetByIDs 按照ID批量查询信息
func (dao *StudyUserDao) MgetByIDs(ctx context.Context, ids []uint64) ([]StudyUserItem, error) {
	var res []StudyUserItem
	where := map[string]any{
		"id in": ids,
	}

	// selectFields := []string{}
	selectFields := studyUserSelectFields

	err := dao.BaseSelectConvert(ctx, where, selectFields, &res)
	if err != nil {
		return nil, err
	}
	return res, nil
}

// MgetByUsername按照ID批量查询信息
func (dao *StudyUserDao) MgetByUsername(ctx context.Context, username string) (*StudyUserItem, error) {
	res := new(StudyUserItem)
	where := map[string]any{
		"username": username,
	}

	// selectFields := []string{}
	selectFields := studyUserSelectFields

	err := dao.BaseSelectConvert(ctx, where, selectFields, res)
	if err != nil {
		return nil, err
	}
	return res, nil
}

// MgetByPage 按照指定条件查询信息
func (dao *StudyUserDao) MgetByPage(ctx context.Context, data StudyUserItem, pn, rn uint32) ([]StudyUserItem, int64, error) {
	where := map[string]any{}

	// if data.ID != nil {
	//     where["id"] = data.ID
	// }

	totalNum, err := dao.Count(ctx, where)
	if err != nil {
		return nil, 0, err
	}

	var res []StudyUserItem
	queryPn := uint(studyUserDefaultPn)
	if pn > 0 {
		queryPn = uint(pn)
	}
	queryRn := uint(studyUserDefaultRn)
	if rn > 0 {
		queryRn = uint(rn)
	}
	where["_limit"] = []uint{(queryPn - 1) * queryRn, queryRn}
	err = dao.BaseSelectConvert(ctx, where, studyUserSelectFields, &res)
	if err != nil {
		return nil, 0, err
	}
	return res, totalNum, nil
}
